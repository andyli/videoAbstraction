<languageVersion : 1.0;>

kernel BilateralBlurTableImpl
<   namespace : "net.onthewings.filters";
    vendor : "Andy Li";
    version : 1;
    description : "Bilateral Blur. The weightings are mapped by provided parameters.";
>
{
    parameter float distanceWeighting0<
        minValue: 0.0;
        maxValue: 1.0;
        defaultValue: 1.0;
        description: "Mapping of the weighting by distance (for current pixel).";
    >;

    parameter float4 distanceWeighting<
        minValue: float4(0,0,0,0);
        maxValue: float4(1,1,1,1);
        defaultValue: float4(0.8824969025845955,0.6065306597126334,0.32465246735834974,0.1353352832366127);
        description: "Mapping of the weighting by distance. index 0 is next to the current pixel.";
    >;

    parameter float4 colorWeighting<
        minValue: float4(0,0,0,0);
        maxValue: float4(1,1,1,1);
        defaultValue: float4(1,0.6065306597126334,0.1353352832366127,0.011108996538242306);
        description: "Mapping of the weighting by color. index 0 is similar color to current pixel's";
    >;

    input image4 src;
    output pixel4 dst;

    void evaluatePixel(){
        float2 curPt = outCoord();
        float4 p, tempP, totalP;
        float s, w, totalWeight;
        float3 vec;

        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP = p;
        totalWeight = w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y-3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y-2.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y-1.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y+0.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y+1.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y+2.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y+3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-4.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y-3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y-1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y+0.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y+1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y+3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-3.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y-3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y-1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y+0.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y+1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y+3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-2.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y-3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y-1.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y+0.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y+1.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y+3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x-1.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y-4.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y-3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y-1.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y+0.0));
        w = distanceWeighting0;
        tempP = abs(sampleNearest(src,curPt)-p);
        w *= colorWeighting[0];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y+1.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y+3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+0.0,curPt.y+4.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y-3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y-1.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y+0.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y+1.0));
        w = distanceWeighting[1];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y+3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+1.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y-3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y-1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y+0.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y+1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y+3.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+2.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y-3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y-2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y-1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y+0.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y+1.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y+2.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y+3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+3.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y-4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y-3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y-2.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y-1.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y+0.0));
        w = distanceWeighting[2];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y+1.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y+2.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y+3.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;
        p = sampleNearest(src,float2(curPt.x+4.0,curPt.y+4.0));
        w = distanceWeighting[3];
        tempP = abs(sampleNearest(src,curPt)-p);
        s = floor(mix(0.0,3.9999,0.25*(tempP[0]+tempP[1]+tempP[2]+tempP[3])));
        w *= colorWeighting[int(s)];
        p *= w;
        totalP += p;
        totalWeight += w;


        dst = totalP/totalWeight;
    }
}
