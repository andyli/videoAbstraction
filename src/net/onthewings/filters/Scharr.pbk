<languageVersion : 1.0;>

kernel Scharr
<   namespace : "net.onthewings.filters";
    vendor : "Andy Li";
    version : 1;
    description : " Scharr operation for edge detection.";
>
{
    input image4 src;
    output pixel4 dst;
    
    const float3x3 m1 = float3x3 (3,10,3,0,0,0,-3,-10,-3);
    const float3x3 m2 = float3x3 (3,0,-3,10,0,-10,3,0,-3);

    void
    evaluatePixel()
    {
        float2 curPt = outCoord();
        float4 tot1 = float4(0.0);
        float4 tot2 = float4(0.0);
        float4 temp;
        
        temp = sampleNearest(src,float2(curPt.x-1.0,curPt.y-1.0));
        tot1 += m1[0][0] * temp;
        tot2 += m2[0][0] * temp;
        
        temp = sampleNearest(src,float2(curPt.x-1.0,curPt.y    ));
        tot1 += m1[0][1] * temp;
        tot2 += m2[0][1] * temp;
        
        temp = sampleNearest(src,float2(curPt.x-1.0,curPt.y+1.0));
        tot1 += m1[0][2] * temp;
        tot2 += m2[0][2] * temp;
        
        temp = sampleNearest(src,float2(curPt.x    ,curPt.y-1.0));
        tot1 += m1[1][0] * temp;
        tot2 += m2[1][0] * temp;
        
        temp = sampleNearest(src,float2(curPt.x    ,curPt.y    ));
        tot1 += m1[1][1] * temp;
        tot2 += m2[1][1] * temp;
        
        temp = sampleNearest(src,float2(curPt.x    ,curPt.y+1.0));
        tot1 += m1[1][2] * temp;
        tot2 += m2[1][2] * temp;
        
        temp = sampleNearest(src,float2(curPt.x+1.0,curPt.y-1.0));
        tot1 += m1[2][0] * temp;
        tot2 += m2[2][0] * temp;
        
        temp = sampleNearest(src,float2(curPt.x+1.0,curPt.y    ));
        tot1 += m1[2][1] * temp;
        tot2 += m2[2][1] * temp;
        
        temp = sampleNearest(src,float2(curPt.x+1.0,curPt.y+1.0));
        tot1 += m1[2][2] * temp;
        tot2 += m2[2][2] * temp;
        
        tot1.a = tot2.a = 1.0;
        
        dst = sqrt(pow(tot1,float4(2,2,2,1)) + pow(tot2,float4(2,2,2,1)));
    }
}
